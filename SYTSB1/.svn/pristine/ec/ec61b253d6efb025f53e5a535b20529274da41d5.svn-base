package com.fwxm.scientific.service;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.File;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.text.SimpleDateFormat;
import java.util.Date;
import java.util.Enumeration;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.zip.ZipEntry;
import java.util.zip.ZipException;
import java.util.zip.ZipFile;
import java.util.zip.ZipOutputStream;

import javax.xml.parsers.DocumentBuilderFactory;
import javax.xml.parsers.ParserConfigurationException;
import javax.xml.transform.Transformer;
import javax.xml.transform.TransformerConfigurationException;
import javax.xml.transform.TransformerException;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.dom.DOMSource;
import javax.xml.transform.stream.StreamResult;

import com.fwxm.scientific.bean.Tjy2ScientificResearch;
import com.fwxm.scientific.dao.Tjy2ScientificResearchDao;
import com.khnt.core.crud.manager.impl.EntityManageImpl;
import com.khnt.core.exception.KhntException;
import com.sun.star.xml.sax.SAXException;























import org.apache.cxf.jaxws.spring.JaxWsWebServicePublisherBeanPostProcessor.ServletAdapter;
import org.apache.poi.poifs.filesystem.DirectoryEntry;
import org.apache.poi.poifs.filesystem.DocumentEntry;
import org.apache.poi.poifs.filesystem.POIFSFileSystem;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;
import org.w3c.dom.Document;
import org.w3c.dom.Element;
import org.w3c.dom.Node;
import org.w3c.dom.NodeList;

import sun.misc.BASE64Decoder;



@Service("tjy2ScientificResearch")
public class Tjy2ScientificResearchManager extends EntityManageImpl<Tjy2ScientificResearch,Tjy2ScientificResearchDao>{
    @Autowired
    Tjy2ScientificResearchDao tjy2ScientificResearchDao;
    
    /**
	 * 保存文档
	 * @param inputStream
	 * @param order
	 */
	public String saveO(InputStream inputStream, Tjy2ScientificResearch research) {
		String orderId = tjy2ScientificResearchDao.saveO(inputStream,research);
		return orderId;
	}
	/**
	 * 取出文档
	 * @param id
	 * @return
	 * @throws KhntException
	 */
	public byte[] getFile(String id) throws KhntException{
		//取得文档
		byte[] order = tjy2ScientificResearchDao.getFile(id);
		//取得表记录
/*		Tjy2ScientificResearch research = tjy2ScientificResearchDao.get(id);
		research.setFileBlob(order);*/
		if(order==null){
			return null;
		}
		return order;
	}
	public void saveBase(String id,String P100001,String P200001,String P300001,String P400001,String P500001,String P600001,String P700001){
		String sql="update TJY2_SCIENTIFIC_RESEARCH set P100001=?,P200001=?,P300001=?,P400001=?,P500001=?,P600001=?,P700001=? where id=?";
		tjy2ScientificResearchDao.createSQLQuery(sql,P100001,P200001,P300001,P400001,P500001,P600001,P700001,id).executeUpdate();
	}
	public  Object[] detailBase(String id){
		Object[] o=null;
		String sql="select t.P100001,t.P200001,t.P300001,t.P400001,t.P500001,t.P600001,t.P700001 from TJY2_SCIENTIFIC_RESEARCH t where t.id = ?";
		List<Object> list=tjy2ScientificResearchDao.createSQLQuery(sql,id).list();
		if(list.size()>0){
			o=(Object[])list.get(0);
			
		}
		return o;
		
	}
	/*public static void input(String clob) throws IOException,
	ZipException, SAXException, ParserConfigurationException,
	TransformerException, TransformerConfigurationException, org.xml.sax.SAXException {
// 使用java.util打开文件
File file=new File("D:1.docx");
boolean exist=file.exists();
boolean read=file.canRead();
boolean write=file.canWrite();
System.out.println(exist);
System.out.println(read);
System.out.println(write);
ZipFile docxFile = new ZipFile(file);
// 返回ZipEntry应用程序接口
ZipEntry documentXML = docxFile.getEntry("word/document.xml");

InputStream documentXMLIS = docxFile.getInputStream(documentXML);

DocumentBuilderFactory dbf = DocumentBuilderFactory.newInstance();

Document doc = dbf.newDocumentBuilder().parse(documentXMLIS);

// linkMan tel proCode companyName fundName fundCode sysProCode
Map<String, String> bookMarkMap = new HashMap<String, String>();
byte b[] = clob.getBytes();    
ByteArrayInputStream bais = new ByteArrayInputStream(b);    
POIFSFileSystem poifs = new POIFSFileSystem();    
DirectoryEntry directory = poifs.getRoot();    
DocumentEntry documentEntry = directory.createDocument("WordDocument", bais);    
bookMarkMap.put("userName", clob);
bookMarkMap.put("password", "888888");

*//**
 * 书签列表
 *//*
NodeList this_book_list = doc.getElementsByTagName("w:bookmarkStart");
if (this_book_list.getLength() != 0) {
	for (int j = 0; j < this_book_list.getLength(); j++) {
		// 获取每个书签
		Element oldBookStart = (Element) this_book_list.item(j);
		// 书签名
		String bookMarkName = oldBookStart.getAttribute("w:name");
		// 书签名，跟需要替换的书签传入的map集合比较
		for (Map.Entry<String, String> entry : bookMarkMap.entrySet()) {
			// 书签处值开始
			Node wr = doc.createElement("w:r");
			Node wt = doc.createElement("w:t");
			Node wt_text = doc.createTextNode(entry.getValue());
			wt.appendChild(wt_text);
			wr.appendChild(wt);
			// 书签处值结束
			if (entry.getKey().equals(bookMarkName)) {
				Element node = (Element) oldBookStart.getNextSibling();// 获取兄弟节点w:r
				// 如果书签处无文字,则在书签处添加需要替换的内容，如果书签处存在描述文字，则替换内容,用w:r
				NodeList wtList = node.getElementsByTagName("w:t");// 获取w:r标签下的显示书签处内容标签w:t
				if (wtList.getLength() == 0) { // 如果不存在，即，书签处本来就无内容，则添加需要替换的内容
					oldBookStart.appendChild(wr);
				} else { // 如果书签处有内容，则直接替换内容
					Element wtNode = (Element) wtList.item(0);
					wtNode.setTextContent(entry.getValue());
				}

			}
		}

	}
}

Transformer t = TransformerFactory.newInstance().newTransformer();
ByteArrayOutputStream baos = new ByteArrayOutputStream();
t.transform(new DOMSource(doc), new StreamResult(baos));
ZipOutputStream docxOutFile = new ZipOutputStream(new FileOutputStream(
		"D:\\response.docx"));
Enumeration entriesIter = docxFile.entries();
while (entriesIter.hasMoreElements()) {
	ZipEntry entry = (ZipEntry) entriesIter.nextElement();
	//如果是document.xml则修改，别的文件直接拷贝，不改变word的样式
	if (entry.getName().equals("word/document.xml")) {
		byte[] data = baos.toByteArray();
		docxOutFile.putNextEntry(new ZipEntry(entry.getName()));
		docxOutFile.write(data, 0, data.length);
		docxOutFile.closeEntry();
	} else {
		InputStream incoming = docxFile.getInputStream(entry);
//此处设定值需慎重，如果设置小了，会破坏word文档，至于为什么会破坏，自己去思考
		byte[] data = new byte[1024 * 512];			int readCount = incoming.read(data, 0, (int) entry.getSize());
		docxOutFile.putNextEntry(new ZipEntry(entry.getName()));
		docxOutFile.write(data, 0, readCount);
		docxOutFile.closeEntry();
	}
}
docxOutFile.close();
}

	*/
	public synchronized  String inputFile(String s,String type){
		BASE64Decoder decoder = new BASE64Decoder();
		 try {// 解密
			 byte[] b = decoder.decodeBuffer(s);
			 // 处理数据
			 for (int i = 0; i < b.length; ++i) {
				 if (b[i] < 0) {
					 b[i] += 256;
					 }
				 }
			 Date currentTime = new Date();
			   SimpleDateFormat formatter = new SimpleDateFormat("yyyyMMddHHmmss");
			   String path = formatter.format(currentTime);
			   //D:/SCSEI_WEB/webapps/ROOT/upload/
			   //D:/apache-tomcat-8.0.46/wtpwebapps/SYTS/upload/
			 OutputStream out = new FileOutputStream("D:/Servers/SCSEI_WEB/webapps/ROOT/upload/"+path+"."+type);
			 
			 out.write(b);
			 out.flush();
			 out.close();
			 return "D:/Servers/SCSEI_WEB/webapps/ROOT/upload/"+path+"."+type;//http://kh.scsei.org.cn/upload/
			 } catch (Exception e) {
				 System.out.println(e);
				 return "";
				 }
		
	}
}
