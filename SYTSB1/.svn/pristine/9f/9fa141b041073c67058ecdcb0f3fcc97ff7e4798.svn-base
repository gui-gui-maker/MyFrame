package com.lsts.mobileapp.confirm.service;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.khnt.bpm.core.bean.Activity;
import com.khnt.bpm.core.engine.FlowEngine;
import com.khnt.bpm.ext.service.FlowDefinitionManager;
import com.khnt.bpm.ext.service.FlowExtManager;
import com.khnt.bpm.ext.support.FlowExtWorktaskParam;
import com.khnt.core.crud.manager.impl.EntityManageImpl;
import com.khnt.core.exception.KhntException;
import com.khnt.rbac.impl.bean.Employee;
import com.khnt.rbac.impl.bean.User;
import com.khnt.rbac.impl.dao.EmployeeDao;
import com.khnt.security.util.SecurityUtil;
import com.khnt.utils.StringUtil;
import com.lsts.common.service.InspectionCommonService;
import com.lsts.device.bean.DeviceDocument;
import com.lsts.device.dao.DeviceDao;
import com.lsts.flow.service.BaseFlowConfigService;
import com.lsts.inspection.bean.InspectionInfo;
import com.lsts.inspection.dao.InspectionInfoDao;
import com.lsts.inspection.service.InspectionService;
import com.lsts.inspection.service.ReportItemRecordService;
import com.lsts.inspection.service.ReportItemValueService;
import com.lsts.log.service.SysLogService;
import com.lsts.mobileapp.confirm.dao.ConfirmDao;
import com.lsts.mobileapp.input.bean.TzsbRecordLog;
import com.lsts.mobileapp.input.dao.TzsbRecordLogDao;
import com.lsts.report.bean.Report;
import com.lsts.report.dao.ReportDao;

import net.sf.json.JSONArray;
import net.sf.json.JSONObject;
import util.TS_Util;
@Service
public class ConfirmService extends EntityManageImpl<InspectionInfo, ConfirmDao>{

	@Autowired
	ConfirmDao confirmDao;
	@Autowired
	InspectionInfoDao infoDao;
	@Autowired
	DeviceDao deviceDao;
	@Autowired
	ReportDao reportDao;
	@Autowired
	EmployeeDao employeeDao;
	@Autowired
	SysLogService logService;
	@Autowired
	FlowExtManager flowExtManager;
	@Autowired
	BaseFlowConfigService baseFlowConfigService;
	@Autowired
	InspectionCommonService inspectionCommonService;
	@Autowired
	ReportItemValueService reportItemValueService;
	@Autowired
	ReportItemRecordService reportItemRecordService;
	@Autowired
	TzsbRecordLogDao recordLogDao;
	@Autowired
	private FlowDefinitionManager flowDefManager;
	@Autowired
	private InspectionService inspectionService;

	/**
	 * 校核提交启动流程、并提交审核、签发
	 */
	public List<InspectionInfo> confirm(HttpServletRequest request, JSONArray businesses, JSONObject formObject) throws Exception {
		
		User user = (User) SecurityUtil.getSecurityUser().getSysUser();
		Employee emp = user.getEmployee();
		
		List<InspectionInfo> infos = new ArrayList<InspectionInfo>();
		
		for (int i = 0,len = businesses.length(); i < len; i++) {
			JSONObject obj = businesses.getJSONObject(i);
			// 获取报告业务信息
			InspectionInfo info = infoDao.get(obj.getString("id"));
			infos.add(info);
			//生成报告编号
			if(StringUtil.isEmpty(info.getReport_sn())) {
				createReportSn(info);
			}
			//校核人
			info.setRecordConfirmId(emp.getId());
			info.setRecordConfirmOp(emp.getName());
			
			//校核结论
			info.setIs_report_confirm(formObject.getString("conclusion"));
			info.setReport_confirm_remark(formObject.getString("remark"));
			//这里一定是通过，前面已经排除了不通过
			logService.setLogs(info.getId(), "原始记录校核", "校核通过", user.getId(),user.getName(), new Date(), request.getRemoteAddr());
			
			// 启动流程，流程自动跳过录入环节进入校核环节
			this.startFlow(request, info, user);
			//现在校核环节，直接提交，如果是一级审核则提交签发，二级审核则提交审核
			this.flowToAuditOrSign(request,info,formObject,user);
			//不报错则，个人认为其实可以不加
			addRecordLog(request,info,formObject,user);
		}
			
		return infos;
	}

	public void startFlow(HttpServletRequest request, InspectionInfo info,User user) throws Exception {
		// 判断是否流程已经启动,未启动才执行。
		// 业务流程表有数据就说明已经启动了流程，不再重新启动流程，没数据就启动流程
		String process_id = confirmDao.getProcess(info);
   		if(StringUtil.isEmpty(process_id)){
   			// 查找流程
   			String flowId = confirmDao.getFlowId(info);
   			if(StringUtil.isEmpty(flowId)) {
   				throw new Exception("没有获取到流程配置信息！");
   			}
   			//声明流程参数对象
   			Map<String, Object> flowParam= new HashMap<String, Object>();
   			//下一步操作人
   			JSONObject databus = new JSONObject();
   			//获取流程名称
   			String flow_name = flowDefManager.get(flowId).getFlowname();
   			//获取流程编码
   			String flow_type =  flowDefManager.get(flowId).getFlowtype();
   			//组装流程参数
   	   		//流程业务ID
   			flowParam.put(FlowExtWorktaskParam.SERVICE_ID, info.getId());
   	   		//流程编码
   			flowParam.put(FlowExtWorktaskParam.SERVICE_TYPE, flow_type);
   	   		//流程标题
   			flowParam.put(FlowExtWorktaskParam.SERVICE_TITLE,flow_name);
   	   		//流程ID
   			flowParam.put(FlowExtWorktaskParam.FLOW_DEFINITION_ID, flowId);
   	   		
   			flowParam.put(FlowExtWorktaskParam.IS_CURRENT_USER_TASK, true);
   			
   			//将下一步操作人放入数据总线，下一步即是录入人员（参见人员均可录入）
   			String checkOpIds =  info.getCheck_op_id();
   			if(StringUtil.isNotEmpty(checkOpIds)){
   				JSONArray personArray = new JSONArray();
   				String ids[] = checkOpIds.split(",");
   				for (String id : ids) {
   					Employee emp = employeeDao.get(id);
   					JSONObject person = new JSONObject();
   					person.put("id", id);
   					person.put("name", emp.getName());
   					personArray.put(person);
				}
   				//获取启动后下一步环节处理人
   	            databus.put(FlowEngine.DATA_BUS_PARTICIPANT_KEY_DEFAULT, personArray);
   	            flowParam.put(FlowExtWorktaskParam.DATA_BUS, databus);
   			}
            //启动流程
            Map<String, Object>  flowMap = flowExtManager.startFlowProcess(flowParam);
            //获取下一步流程步骤
   			List<Activity> list = (List<Activity>) flowMap.get(FlowExtWorktaskParam.RESULT_ACTIVITY_LIST);
   			//改变业务表状态 1 已启动流程
   			info.setIs_flow("1");
   			//改变业务表当前环节的ActivityId(activity业务表的id)
   			info.setActivity_id(list.get(0).getId());
   			info.setFlow_note_id(list.get(0).getActivityId());//activity业务表的activityId 流程环节
   			//改变业务表当前环节的名称
   			info.setFlow_note_name(list.get(0).getName());
   			//设置业务表流程是否结束 0 - 未结束  1 - 已结束
   			info.setFlow_note_end("0");
   			
   			logService.setLogs(info.getId(), "检验任务生成","从检验任务生成环节进入报告录入环节。",user.getId(), user.getName(),new Date(), request.getRemoteAddr(), "1");
   		}
		
	}
	
	
	public void flowToAuditOrSign(HttpServletRequest request,InspectionInfo info,JSONObject formObject,User user) throws Exception {
			//提交流程需要的参数
			Map<String,Object> paramMap = new HashMap<String,Object>();
			
			paramMap.put(FlowExtWorktaskParam.ACTIVITY_ID, info.getActivity_id());
			paramMap.put(FlowExtWorktaskParam.SERVICE_ID,info.getId());
			
			Report report = reportDao.get(info.getReport_type());
			String checkFLow = report.getCheck_flow();
			String act  = "1".equals(checkFLow)?"签发":"审核";
			String nextOp="",nextOpName="";
			// 西藏、新疆、九寨报告，不进行自动分配，由审核人手动选择签发人
			if("100069".equals(info.getCheck_unit_id()) 
					|| "100090".equals(info.getCheck_unit_id()) 
					|| "100091".equals(info.getCheck_unit_id())
					|| "0".equals(checkFLow))
			{
				nextOp = formObject.getString("nextOp");
				
				nextOpName = formObject.getString("nextOpName");
			
				if(nextOpName.equals(info.getEnter_op_name()) || nextOpName.equals(user.getName()))
				{
					throw new Exception(act+"人员不能是参检人员，报告编号：" + info.getReport_sn());
				}
			}else if("1".equals(checkFLow)) {
				//1级,非西藏、新疆、九寨
				// 除压力容器之外其他设备均由系统进行自动随机分配签发人
				DeviceDocument ddoc = deviceDao.get(info.getFk_tsjc_device_document_id());
				String deviceBigClass = inspectionService.getBigClass(info,ddoc);
				if(StringUtil.isEmpty(deviceBigClass)) 
				{
					throw new Exception("为获取到设备大类！");
				}
				Map<String, Object> infoMaps = inspectionCommonService.autoIssue(info, deviceBigClass);
				if(Boolean.valueOf(String.valueOf(infoMaps.get("success"))))
				{
					nextOp = String.valueOf(infoMaps.get("next_op_id"));
					nextOpName = String.valueOf(infoMaps.get("next_op_name"));
				}else{
					throw new Exception("获取签发人员失败："+String.valueOf(infoMaps.get("msg")));
				}
			}
			if(StringUtil.isEmpty(nextOp)) {
				throw new Exception("获取"+act+"人员失败！");
			}
			JSONObject databus = new JSONObject();
			// 获取并组装流程下一步操作人，表单选的人
			JSONArray personArray = new JSONArray();
			JSONObject person = new JSONObject();
			person.put("id", nextOp);
			person.put("name", nextOpName);
			personArray.put(person);
			databus.put(FlowEngine.DATA_BUS_PARTICIPANT_KEY_DEFAULT, personArray);
			paramMap.put(FlowExtWorktaskParam.DATA_BUS, databus);
			// 提交流程
			flowProcess(request,paramMap,info,formObject,user);
			info.setRecordFlow("2");
			//infoDao.save(info);
	}
	public void flowProcess(HttpServletRequest request,Map<String,Object> flowParam,InspectionInfo info,JSONObject formObject,User user) throws Exception{
   			Map<String, Object> flowMap = null ;
   			try {
   				flowMap = flowExtManager.submitActivity(flowParam);
   			} catch (Exception e) {
   				e.printStackTrace();
   				log.error("提交流程失败：业务ID："+info.getId());
   				throw new KhntException("提交流程失败：业务ID："+info.getId());
   			}
   			
   			//获取下一步流程步骤
   			List<Activity> list = (List<Activity>) flowMap.get(FlowExtWorktaskParam.RESULT_ACTIVITY_LIST);
   			
   			//为记录日志准备
   			//取得环节名称
   			String nodeName = info.getFlow_note_name();
   			//准备操作说明
   			String opRemark = "从【"+nodeName+"】环节进入【"+list.get(0).getName()+"】环节。";
   		 	//页面提交的操作说明
   			if(StringUtil.isNotEmpty(formObject.getString("remark"))) {
   				opRemark += "\n说明："+formObject.getString("remark") ;
   			}
   			
   			//修改业务表业务流程环节ID
   			info.setFlow_note_id(list.get(0).getActivityId());
   			//修改业务表业务流程环节名称
   			info.setFlow_note_name(list.get(0).getName());
   			
   			logService.setLogs(info.getId(), nodeName, opRemark,user.getId(), user.getName(),new Date(), request.getRemoteAddr(), "1");
	}
	
	public void createReportSn(InspectionInfo info) throws Exception{
		// 生成报告书编号
		String report_type = info.getReport_type();
		String report_sn = "";
		if (StringUtil.isEmpty(info.getReport_sn())) {
			String check_type = info.getInspection().getCheck_type();
			String device_id = info.getFk_tsjc_device_document_id();
			// 获取设备类型
			String device_type = "";
			if (StringUtil.isNotEmpty(device_id)) {
				// 根据设备ID获取设备基础信息bean
				DeviceDocument devicedoc = deviceDao.get(device_id);
				if (devicedoc != null) {
					if (StringUtil.isNotEmpty(devicedoc.getDevice_sort_code())) {
						device_type = devicedoc.getDevice_sort_code();
					}
				}

			}
			synchronized (this){
				Map<String, Object> reportSnMap = inspectionCommonService.createReportSn("moCreateReport", info.getId(),
						report_type, check_type, device_type);
				report_sn = String.valueOf(reportSnMap.get("report_sn"));
				// 报告输编号插入业务主表
				info.setReport_sn(report_sn);
			}
		} else {
			report_sn = info.getReport_sn();
		}
		//  将报告书编号更新到报告检验项目参数表
		reportItemValueService.updateItemValue(info.getId(), report_type, "REPORT_SN", report_sn);
		//  将报告书编号更新到原始记录检验项目参数表
		reportItemRecordService.updateItemValue(info.getId(), report_type, "REPORT_SN", report_sn);
	}
	
	public void addRecordLog(HttpServletRequest request, InspectionInfo info,JSONObject formObject,User user) {
		String checkFlow = formObject.getString("check_flow");
		String act = ("1".equals(checkFlow)?"签发":"审核");
		try {
			// 记录日志
			TzsbRecordLog log  = new TzsbRecordLog();
			log.setBusiness_id(info.getId());
			log.setOp_action("原始记录提交"+act);
			log.setOp_ip(TS_Util.getIpAddress(request));
			log.setOp_remark("原始记录提交"+act);
			log.setOp_status("提交"+act);
			log.setOp_time(new Date());
			log.setOp_user_id(user.getId());
			log.setOp_user_name(user.getName());
			recordLogDao.save(log);
		} catch (Exception e) {
			e.printStackTrace();
		}
	}
}
