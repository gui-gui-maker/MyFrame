package com.lsts.mobileapp.input.web;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.khnt.core.crud.web.SpringSupportAction;
import com.khnt.core.crud.web.support.JsonWrapper;
import com.lsts.inspection.bean.InspectionInfo;
import com.lsts.mobileapp.input.bean.ReportItemRecordExt;
import com.lsts.mobileapp.input.service.ReportItemRecordExtService;

import net.sf.json.JSONObject;

/**
 * 移动端原始记录业务控制器
 * 
 * @ClassName ReportItemRecordAction
 * @JDK 1.7
 * @author GaoYa
 * @date 2015-11-14 上午09:35:00
 */
@Controller
@RequestMapping("reportItemRecordExtAction")
public class ReportItemRecordExtAction extends
		SpringSupportAction<ReportItemRecordExt, ReportItemRecordExtService> {

	@Autowired
	private ReportItemRecordExtService reportItemRecordService;

	/**
	 * 移动端获取所有机电、承压检验部门人员信息
	 * @param request
	 * 
	 * @return
	 */
	@RequestMapping("getCheckUsersList")
	@ResponseBody
	public Map<String, Object> getCheckUsersList(HttpServletRequest request,String orgId){
		Map<String, Object> map = new HashMap<String, Object>();
		try {		
			String codeupdateTime = request.getParameter("codeupdateTime");
			if(codeupdateTime==null||"null".equals(codeupdateTime)) {
				map.put("codeTable", reportItemRecordService.queryCodeTable(null,null));
				
			}else {
				String codeIds = reportItemRecordService.queryCodesByIds(codeupdateTime);
				map.put("codeTable", reportItemRecordService.queryCodeTable(null,codeIds));
				map.put("codeIds", codeIds.replace(",", "','"));
			}
			
			map.put("user", reportItemRecordService.getCheckUsersList(orgId));
			
			
			map.put("success", true);
		} catch (Exception e) {
			e.printStackTrace();
			map.put("success", false);
			map.put("msg", "网络异常，获取部门人员信息失败！");
		}
		return map;
	}

	/**
	 * 保存原始记录到服务器
	 * author pingZhou
	 * @param request
	 * @return
	 */
	@RequestMapping("saveMobileInsp")
	@ResponseBody
	private HashMap<String, Object> saveMobileInsp(HttpServletRequest request) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		try {
			
			String data = request.getParameter("data");
			JSONObject object = JSONObject.fromString(data);
			if(object==null){
				map.put("success", false);
				map.put("msg", "请传入参数！");
				return map;
			}
			InspectionInfo info =  this.reportItemRecordService.saveMap(request,object);
			map.put("infoId", info.getId());
			map.put("success", true);
			return map;
		} catch (Exception e) {
			log.debug(e.getMessage());
			e.printStackTrace();
			return JsonWrapper.failureWrapperMsg(e.getMessage());
		}
	}
	
	/**
	 * pc端分页保存
	 * author pingZhou
	 * @param request
	 * @param list
	 * @return
	 */
	@RequestMapping("saveMap")
	@ResponseBody
	private HashMap<String, Object> saveMap(HttpServletRequest request, @RequestBody List<Map<String, Object>> list) {
		try {

			String page = request.getParameter("page");
			this.reportItemRecordService.saveMapPc(request,list, page);
			return JsonWrapper.successWrapper();
		} catch (Exception e) {
			e.printStackTrace();
			return JsonWrapper.failureWrapperMsg(e.getMessage());
		}
	}
	
	
	/**
	 * 转交他人录入
	 * author pingZhou
	 * @param request
	 * @return
	 */
	@RequestMapping("saveInspToOther")
	@ResponseBody
	private HashMap<String, Object> saveInspToOther(HttpServletRequest request) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		try {
			
			String data = request.getParameter("data");
			
			JSONObject object = JSONObject.fromString(data);
			if(object==null){
				map.put("success", false);
				map.put("msg", "请传入参数！");
				return map;
			}

			if(!object.has("nextOpId")||object.get("nextOpId")==null){
				map.put("success", false);
				map.put("msg", "请选择下一个录入人员！");
				return map;
			}
			
			InspectionInfo info =  this.reportItemRecordService.saveInspToOther(request,object);
			map.put("infoId", info.getId());
			map.put("success", true);
			return map;
		} catch (Exception e) {
			log.debug(e.getMessage());
			e.printStackTrace();
			return JsonWrapper.failureWrapperMsg(e.getMessage());
		}
	}
	
	/**
	 * 查询原始记录数据
	 */
	@RequestMapping("getInspData")
	@ResponseBody
	private HashMap<String, Object> getInspData(HttpServletRequest request) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		try {


			String infoId = request.getParameter("infoId");
			if(infoId==null){
				map.put("success", false);
				map.put("msg", "请传入参数！");
				return map;
			}

			map =  this.reportItemRecordService.getInspData(map,request,infoId);
			map.put("success", true);
			return map;
		} catch (Exception e) {
			e.printStackTrace();
			return JsonWrapper.failureWrapperMsg(e.getMessage());
		}
	}
	
	
	
	/**
	 * 提交校核
	 * author pingZhou
	 * @param request
	 * @return
	 */
	@RequestMapping("subToConfirm")
	@ResponseBody
	private HashMap<String, Object> subToConfirm(HttpServletRequest request) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		try {
			
			String data = request.getParameter("data");
			
			JSONObject object = JSONObject.fromString(data);
			if(object==null){
				map.put("success", false);
				map.put("msg", "请传入参数！");
				return map;
			}

			if(!object.has("nextOpId")||object.get("nextOpId")==null){
				map.put("success", false);
				map.put("msg", "请选择校核人员！");
				return map;
			}
			
			this.reportItemRecordService.subConfirm(request, map);
			map.put("success", true);
			return map;
		} catch (Exception e) {
			e.printStackTrace();
			return JsonWrapper.failureWrapperMsg(e.getMessage());
		}
	}
	
	
	
	/**
	 * 提交校核（不包括数据保存）
	 * author pingZhou
	 * @param request
	 * @return
	 */
	@RequestMapping("subToConfirmWithoutData")
	@ResponseBody
	private HashMap<String, Object> subToConfirmWithoutData(HttpServletRequest request) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		try {
			
			String data = request.getParameter("data");
			
			JSONObject object = JSONObject.fromString(data);
			if(object==null){
				map.put("success", false);
				map.put("msg", "请传入参数！");
				return map;
			}

			if(!object.has("nextOpId")||object.get("nextOpId")==null){
				map.put("success", false);
				map.put("msg", "请选择校核人员！");
				return map;
			}
			
			this.reportItemRecordService.subToConfirmWithoutData(request, map);
			map.put("success", true);
			return map;
		} catch (Exception e) {
			e.printStackTrace();
			return JsonWrapper.failureWrapperMsg(e.getMessage());
		}
	}
	
	/**
	 * 查询原始记录数据
	 */
	@RequestMapping("reviceInput")
	@ResponseBody
	private HashMap<String, Object> reviceInput(HttpServletRequest request) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		try {


			String infoId = request.getParameter("infoId");
			if(infoId==null){
				map.put("success", false);
				map.put("msg", "请传入参数！");
				return map;
			}

			map =  this.reportItemRecordService.reviceInput(map,request,infoId);
			map.put("success", true);
			return map;
		} catch (Exception e) {
			e.printStackTrace();
			return JsonWrapper.failureWrapperMsg(e.getMessage());
		}
	}
	
	@RequestMapping("getCopyData")
	@ResponseBody
	private HashMap<String, Object> getCopyData(HttpServletRequest request) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		try {


			String infoId = request.getParameter("infoId");
			if(infoId==null){
				map.put("success", false);
				map.put("msg", "请传入参数！");
				return map;
			}

			this.reportItemRecordService.getCopyData(map,request,infoId);
			map.put("success", true);
			return map;
		} catch (Exception e) {
			e.printStackTrace();
			return JsonWrapper.failureWrapperMsg(e.getMessage());
		}
	}
	
	
	/**
	 * 分页复制
	 * author pingZhou
	 * @param request
	 * @return
	 */
	@RequestMapping("getCopyDataByPage")
	@ResponseBody
	private HashMap<String, Object> getCopyDataByPage(HttpServletRequest request) {
		HashMap<String, Object> map = new HashMap<String, Object>();
		try {


			String infoId = request.getParameter("infoId");
			if(infoId==null){
				map.put("success", false);
				map.put("msg", "请传入参数！");
				return map;
			}

			this.reportItemRecordService.getCopyDataByPage(map,request,infoId);
			map.put("success", true);
			return map;
		} catch (Exception e) {
			e.printStackTrace();
			return JsonWrapper.failureWrapperMsg(e.getMessage());
		}
	}
	
	
	
	/**
	 * 退回原始记录录入
	 * author pingZhou
	 * @param request
	 * @param ids
	 * @return
	 */
	@RequestMapping("backToInput")
	@ResponseBody
	public HashMap<String, Object> backToInput(HttpServletRequest request,String ids){
		
		HashMap<String, Object> map = new HashMap<String, Object>();
		
		try {
			
			 this.reportItemRecordService.backToInput(request,ids,null,null);
			map.put("success", true);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.debug(e.getMessage());
			map.put("success", false);
			map.put("msg", "退回失败！");
			
		}
		return map;
	}
	
	/**
	 * 查询待处理任务条数
	 * author pingZhou
	 * @param request
	 * @return
	 */
	@RequestMapping("allDealCount")
	@ResponseBody
	public HashMap<String, Object> allDealCount(HttpServletRequest request){
		
		HashMap<String, Object> map = new HashMap<String, Object>();
		
		try {
			
			List<HashMap<String, Object>> countMap =  this.reportItemRecordService.allDealCount(request);
			map.put("data", countMap);
			map.put("success", true);
			
		} catch (Exception e) {
			e.printStackTrace();
			log.debug(e.getMessage());
			map.put("success", false);
			map.put("msg", "退回失败！");
			
		}
		return map;
	}
	
	/**
	 * 获取码表信息
	 * author pingZhou
	 * @param request
	 * @param code
	 * @return
	 */
	@RequestMapping("queryCodeTable")
	@ResponseBody
	public Map<String, Object> queryCodeTable(HttpServletRequest request,String code){
		Map<String, Object> map = new HashMap<String, Object>();
		try {		
			
			map.put("codeTable", reportItemRecordService.queryCodeTable(code,null));
			map.put("success", true);
		} catch (Exception e) {
			e.printStackTrace();
			map.put("success", false);
			map.put("msg", "获取码表信息失败！");
		}
		return map;
	}
}
